import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:google_mlkit_face_detection/google_mlkit_face_detection.dart';
import 'package:image_cropper/image_cropper.dart';
import 'package:http/http.dart' as http;
import 'package:firebase_auth/firebase_auth.dart';
import 'dart:io';
import 'dart:convert';

class UploadFacePage extends StatefulWidget {
  @override
  _UploadFacePageState createState() => _UploadFacePageState();
}

class _UploadFacePageState extends State<UploadFacePage> {
  File? _image;
  final ImagePicker _picker = ImagePicker();
  List<Face> _faces = [];
  bool _isProcessing = false;
  bool _isUploading = false;

  // ‚úÖ ‡πÉ‡∏™‡πà Token ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö Django API
  final String token = '69046e79dbf663ac70876fea57bb07e8bab0daf9';

  // ‚úÖ email ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà login ‡∏î‡πâ‡∏ß‡∏¢ Firebase
  String? _userEmail;

  @override
  void initState() {
    super.initState();
    checkLoginStatus();
  }

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ login ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  void checkLoginStatus() {
    final currentUser = FirebaseAuth.instance.currentUser;

    if (currentUser == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô')),
      );
      Navigator.of(context).pop(); // ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°
    } else {
      setState(() {
        _userEmail = currentUser.email;
      });
    }
  }

  Future<void> _notifyPiToRefresh() async {
  final uri = Uri.parse('http://192.168.0.104:9000/refresh_faces'); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô IP ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Raspberry Pi
  try {
    final response = await http.post(uri);
    if (response.statusCode == 200) {
      print("üì° ‡πÅ‡∏à‡πâ‡∏á Raspberry Pi ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } else {
      print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏à‡πâ‡∏á Raspberry Pi ‡πÑ‡∏î‡πâ (${response.statusCode})");
    }
  } catch (e) {
    print("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Raspberry Pi: $e");
  }
}

  Future<void> _pickImage(ImageSource source) async {
    try {
      final pickedFile = await _picker.pickImage(source: source);

      if (pickedFile != null) {
        setState(() {
          _image = File(pickedFile.path);
          _isProcessing = true;
        });
        await _detectFaces(_image!);
      }
    } catch (e) {
      print("Error picking image: $e");
      _showSnackBar("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ");
    }
  }

  Future<void> _detectFaces(File imageFile) async {
    final inputImage = InputImage.fromFile(imageFile);
    final options = FaceDetectorOptions(
      performanceMode: FaceDetectorMode.accurate,
    );
    final faceDetector = FaceDetector(options: options);

    try {
      final faces = await faceDetector.processImage(inputImage);
      setState(() {
        _faces = faces;
        _isProcessing = false;
      });

      if (_faces.isEmpty) {
        _showSnackBar('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
      }
    } catch (e) {
      print("Error detecting faces: $e");
      _showSnackBar('‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      setState(() {
        _isProcessing = false;
      });
    } finally {
      faceDetector.close();
    }
  }

  Future<File?> _cropFace(File imageFile, Rect boundingBox) async {
    try {
      final croppedFile = await ImageCropper().cropImage(
        sourcePath: imageFile.path,
        aspectRatio: CropAspectRatio(ratioX: 1, ratioY: 1),
        uiSettings: [
          AndroidUiSettings(
            toolbarTitle: 'Crop Face',
            lockAspectRatio: true,
          ),
          IOSUiSettings(
            title: 'Crop Face',
          ),
        ],
      );

      if (croppedFile != null) {
        return File(croppedFile.path);
      }
    } catch (e) {
      print("Error cropping image: $e");
      _showSnackBar('‡∏ï‡∏±‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
    return null;
  }

  Future<void> _uploadFace(File faceImage, String email) async {
    setState(() {
      _isUploading = true;
    });

    final uri = Uri.parse('http://192.168.0.104:8000/api/upload/');

    final request = http.MultipartRequest('POST', uri)
      ..fields['email'] = email
      ..files.add(await http.MultipartFile.fromPath(
        'image',
        faceImage.path,
      ));

    // ‚úÖ ‡πÉ‡∏™‡πà Token Authorization
    request.headers['Authorization'] = 'Token $token';
    request.headers['Accept'] = 'application/json';

    try {

      final response = await request.send();

      if (response.statusCode == 200) {
        final responseBody = await response.stream.bytesToString();
        final data = jsonDecode(responseBody);

        print('Upload Success: $data');

        _showSnackBar('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ');

        
        await _notifyPiToRefresh();
        // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        Navigator.pop(context);
      } else {
        final errorMsg = '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${response.statusCode})';
        print(errorMsg);
        _showSnackBar(errorMsg);
      }
    } catch (e) {
      print("Error uploading face: $e");
      _showSnackBar('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î');
    } finally {
      setState(() {
        _isUploading = false;
      });
    }
  }

  void _showSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.redAccent,
      ),
    );
  }

  Future<void> _confirmUpload() async {
    final result = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤'),
        content: const Text('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'),
        actions: [
          TextButton(
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
            onPressed: () => Navigator.of(context).pop(false),
          ),
          ElevatedButton(
            child: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô'),
            onPressed: () => Navigator.of(context).pop(true),
          ),
        ],
      ),
    );

    if (result == true) {
      if (_faces.isNotEmpty) {
        final croppedFace = await _cropFace(_image!, _faces.first.boundingBox);
        if (croppedFace != null && _userEmail != null) {
          await _uploadFace(croppedFace, _userEmail!);
        } else {
          _showSnackBar('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ');
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤"),
        centerTitle: true,
        backgroundColor: const Color(0xFFF7F7F7),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Expanded(
              child: _image == null
                  ? const Center(child: Text("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"))
                  : Stack(
                      children: [
                        Image.file(_image!),
                        ..._faces.map((face) {
                          return Positioned(
                            left: face.boundingBox.left,
                            top: face.boundingBox.top,
                            width: face.boundingBox.width,
                            height: face.boundingBox.height,
                            child: Container(
                              decoration: BoxDecoration(
                                border: Border.all(color: Colors.red, width: 2),
                              ),
                            ),
                          );
                        }).toList(),
                      ],
                    ),
            ),
            if (_isProcessing || _isUploading)
              const Padding(
                padding: EdgeInsets.all(8.0),
                child: CircularProgressIndicator(),
              )
            else
              Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      ElevatedButton.icon(
                        onPressed: () => _pickImage(ImageSource.camera),
                        icon: const Icon(Icons.camera_alt),
                        label: const Text("‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ"),
                      ),
                      ElevatedButton.icon(
                        onPressed: () => _pickImage(ImageSource.gallery),
                        icon: const Icon(Icons.photo_library),
                        label: const Text("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà"),
                      ),
                    ],
                  ),
                  const SizedBox(height: 12),
                  if (_faces.isNotEmpty)
                    ElevatedButton(
                      onPressed: _confirmUpload,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.green,
                      ),
                      child: const Text("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤"),
                    ),
                ],
              ),
          ],
        ),
      ),
      backgroundColor: const Color(0xFFF7F7F7),
    );
  }
}
